BUILDING AN HTTP CLIENT THAT INTERACTS WITH SHODAN:
Prior to performing any authorized adversarial activities against an organization, any good attacker begins with
reconnaissance. Typically, this starts with passive techniques that don’t send packets to the target; that way,
detection of the activity is next to impossible. Attackers use a variety of sources and services—including social
networks, public records, and search engines—to gain potentially useful information about the target.

It’s absolutely incredible how seemingly benign information becomes critical when environmental context is applied
during a chained attack scenario. For example, a web application that discloses verbose error messages may, alone,
be considered low severity. However, if the error messages disclose the enterprise username format, and if the
organization uses single-factor authentication for its VPN, those error messages could increase the likelihood of
an internal network compromise through password-guessing attacks.

Maintaining a low profile while gathering the information ensures that the target’s awareness and security posture
remains neutral, increasing the likelihood that your attack will be successful.

Shodan (https://www.shodan.io/), self-described as “the world’s first search engine for internet-connected devices,”
facilitates passive reconnaissance by maintaining a searchable database of networked devices and services, including
metadata such as product names, versions, locale, and more. Think of Shodan as a repository of scan data, even if it
does much, much more.


REVIEWING THE STEPS FOR BUILDING AN API CLIENT:
First, you’ll need a Shodan API key, which you get after you register on Shodan’s website. Now, get your API key from
the site and set it as an environment variable. The following examples will work as-is only if you save your API key
as the variable SHODAN_API_KEY.

The client you build will implement two API calls: one to query subscription credit information and the other to
search for hosts that contain a certain string. You use the latter call for identifying hosts; for example, ports or
operating systems matching a certain product.

Luckily, the Shodan API is straightforward, producing nicely structured JSON responses. This makes it a good starting
point for learning API interaction. Here is a high-level overview of the typical steps for preparing and building an
API client:
    - Review the service’s API documentation.
    - Design a logical structure for the code in order to reduce complexity and repetition.
    - Define request or response types, as necessary, in Go.
    - Create helper functions and types to facilitate simple initialization, authentication, and communication to
    reduce verbose or repetitive logic.
    - Build the client that interacts with the API consumer functions and types.


DESIGNING THE PROJECT STRUCTURE:
When building an API client, you should structure it so that the function calls and logic stand alone. This
allows you to reuse the implementation as a library in other projects. That way, you won’t have to reinvent
the wheel in the future. Building for reusability slightly changes a project’s structure. For the Shodan
example, here’s the project structure:
    $ tree github.com/blackhat-go/bhg/ch-3/shodan
    github.com/blackhat-go/bhg/ch-3/shodan
        |---cmd
        |   |---shodan
        |       |---main.go
        |---shodan
            |---api.go
            |---host.go
            |---shodan.go
The main.go file defines package main and is used primarily as a consumer of the API you’ll build; in this case,
you use it primarily to interact with your client implementation.
The files in the shodan directory—api.go, host.go, and shodan.go—define package shodan, which contains the types
and functions necessary for communication to and from Shodan. This package will become your stand-alone library
that you can import into various projects.